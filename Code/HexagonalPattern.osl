#define A sqrt(3)/2
#define A2 (2*A)
#define HA (A/2)



surface Hexagonos(vector Vector=0, 
          output float Pattern=0[[string label="Pattern"]], 
          output float CentersD=0[[string label="Centers"]], 
          output float MiddleD=0[[string label="Middle Points"]], 
          output float ZonesC=0[[string label="Zones"]]
         )
{
    float coordx = mod(Vector[0],3);
    float coordy = mod(Vector[1],A2);
    float coordz = mod(Vector[2],3);
    int Zones=0;
    int Tile=0;

    Zones=(int(((Vector[1]/A2))-coordy) % 2);
    
    if ( coordx > 1.5 ) coordx = 3 - coordx;
    if ( coordy > A ) {coordy = A2 - coordy; Tile=1;}
    if ( coordz > 1.5 ) coordz = 3 - coordz;
    
    
     
   vector Middle[8]={vector(0,A,0),
    vector(0.75,HA,0),
    vector(1.5,0,0),
    vector(0,HA,0.75),
    vector(0,0,1.5),
    vector(1.5,0,1.5),
    vector(0.75,0,0.375),
    vector(0.75,0,0.625)};
    
    vector coord=vector(coordx,coordy,coordz);   
     
    vector Centers[5]={vector(0,0,0),
        vector(1.5,A,0),
        vector(0,A,1.5),
        vector(1.5,0,0.95)};
        
    vector VectorAct=Middle[0];
    vector CenterAct=Centers[0];

    for (int a=0;a<4;a++)
    {
        if (a==0)
        {
            
            if (Zones==0)
            {
                if (Tile==0)ZonesC=1;
                else ZonesC=0.75;
            }
            else
            {
                if (Tile==0)ZonesC=0.75;
                else ZonesC=1;
            }     
        }
      if (distance(coord,Centers[a])<distance(coord,CenterAct))
      {
      CenterAct=Centers[a];
      
            if (Zones==0)
            {
            ZonesC=0.5;
            }
            else
            {
            ZonesC=0.25;
            }                   
      }  
    }
    
    for (int a=0;a<8;a++)
    {
      if (distance(coord,Middle[a])<distance(coord,VectorAct))
      {
      VectorAct=Middle[a];
      }  
    }
    
    MiddleD=distance(coord,VectorAct);
    CentersD=distance(coord,CenterAct);

    Pattern=1-( distance(CenterAct,VectorAct)-
        (pow(distance(VectorAct,coord),2)-pow(distance(CenterAct,coord),2)+pow(distance(CenterAct,VectorAct),2))/
        (2*distance(CenterAct,VectorAct))
           );
}